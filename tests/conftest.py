"""
Test fixtures for all codectx tests
"""
import os
import tempfile
import pytest
from pathlib import Path
from typing import Dict, Any
from datetime import datetime

from codectx.processing import ProcessingConfig, ProcessingMode


@pytest.fixture
def temp_dir():
    """Create a temporary directory for testing"""
    with tempfile.TemporaryDirectory() as tmpdir:
        yield tmpdir


@pytest.fixture 
def sample_files(temp_dir):
    """Create sample files for testing"""
    files = {
        'small.py': 'print("hello")',
        'large.py': '''
"""
Large Python file for testing AI summarization
"""
import os
import sys
from typing import List, Dict, Optional

class SampleClass:
    """A sample class for testing"""
    
    def __init__(self, name: str):
        self.name = name
        self.data = {}
    
    def process_data(self, items: List[str]) -> Dict[str, int]:
        """Process a list of items"""
        result = {}
        for item in items:
            result[item] = len(item)
        return result
    
    def save_to_file(self, filename: str) -> None:
        """Save data to file"""
        with open(filename, 'w') as f:
            f.write(str(self.data))

def main():
    """Main function"""
    sample = SampleClass("test")
    items = ["apple", "banana", "cherry"]
    processed = sample.process_data(items)
    print(f"Processed: {processed}")

if __name__ == "__main__":
    main()
''',
        'binary_file.bin': b'\x00\x01\x02\x03\xff',
        'README.md': '''# Test Project

This is a test project for codectx testing.

## Features
- Feature 1
- Feature 2

## Usage
Run the code with:
```bash
python main.py
```
''',
        'config.json': '''
{
    "name": "test-project",
    "version": "1.0.0",
    "dependencies": ["requests", "pytest"]
}
'''
    }
    
    # Create files
    created_files = {}
    for filename, content in files.items():
        filepath = Path(temp_dir) / filename
        if isinstance(content, bytes):
            filepath.write_bytes(content)
        else:
            filepath.write_text(content)
        created_files[filename] = str(filepath)
    
    return created_files


@pytest.fixture
def sample_ignore_file(temp_dir):
    """Create a sample .codectxignore file"""
    ignore_content = '''
# Test ignore patterns
*.tmp
*.log
build/
node_modules/
__pycache__/
test_*/
'''
    ignore_path = Path(temp_dir) / '.codectxignore'
    ignore_path.write_text(ignore_content.strip())
    return str(ignore_path)


@pytest.fixture
def mock_config():
    """Create a mock processing configuration"""
    return ProcessingConfig(
        mode=ProcessingMode.MOCK,
        api_key="test-key",
        api_url="https://test-api.com",
        model="test-model",
        token_threshold=200,
        timeout=30.0,
        retry_attempts=3,
        max_file_size_mb=10.0,
        output_file="test-codectx.md"
    )


@pytest.fixture
def ai_config():
    """Create an AI processing configuration"""
    return ProcessingConfig(
        mode=ProcessingMode.AI_SUMMARIZATION,
        api_key="test-key",
        api_url="https://test-api.com",
        model="test-model",
        token_threshold=200,
        timeout=30.0,
        retry_attempts=3,
        max_file_size_mb=10.0,
        output_file="test-codectx.md"
    )


@pytest.fixture
def copy_config():
    """Create a copy mode configuration"""
    return ProcessingConfig(
        mode=ProcessingMode.COPY,
        api_key=None,
        api_url="https://test-api.com",
        model="test-model", 
        token_threshold=200,
        timeout=30.0,
        retry_attempts=3,
        max_file_size_mb=10.0,
        output_file="test-codectx.md"
    )


@pytest.fixture
def existing_codectx_md(temp_dir):
    """Create an existing codectx.md file for testing updates"""
    content = '''# Project Summary

Generated by codectx on 2024-01-01 10:00:00

Total files processed: 2

---

## small.py

Summarized on 2024-01-01 10:00:00 (checksum: abc123)

print("hello")

## old_file.py

Summarized on 2024-01-01 09:00:00 (checksum: def456)

- **Role**: Old file that no longer exists
- **Classes**: None
- **Functions**: old_function()
- **Dependencies**: None

'''
    
    codectx_path = Path(temp_dir) / 'codectx.md'
    codectx_path.write_text(content.strip())
    return str(codectx_path)


@pytest.fixture
def mock_api_response():
    """Mock API response for testing"""
    return {
        'choices': [
            {
                'message': {
                    'content': '''- **Role**: Test file for unit testing
- **Classes**: TestClass
- **Functions**: test_function(), helper_function()
- **Dependencies**: pytest, unittest'''
                }
            }
        ]
    }


@pytest.fixture
def env_vars():
    """Fixture to manage environment variables during tests"""
    original_env = {}
    
    def set_env(**kwargs):
        for key, value in kwargs.items():
            if key in os.environ:
                original_env[key] = os.environ[key]
            os.environ[key] = value
    
    def restore_env():
        for key in list(os.environ.keys()):
            if key.startswith('CODECTX_'):
                if key in original_env:
                    os.environ[key] = original_env[key]
                else:
                    del os.environ[key]
    
    yield set_env
    restore_env()